package com.example.dsalov2.simplenotifications;

import java.util.Calendar;

import android.app.AlarmManager;
import android.app.DatePickerDialog;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.Toast;

/**
 * Created by dsalov2 on 4/10/2017.
 *
 * This is the activity that is used to create new reminders.
 */
public class ReminderActivity extends AppCompatActivity {
    private final int DEFAULT = 0;

    Switch setNotificationSwitch;
    Button createReminderButton;
    Button dateButton;
    Button timeButton;
    EditText dateEditText;
    EditText timeEditText;
    EditText detailsEditText;

    private int currentDayOfMonth;
    private int currentMonth;
    private int currentYear;
    private int currentHourOfDay;
    private int currentMinute;

    Reminder reminder;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_reminder);

        setNotificationSwitch = (Switch) findViewById(R.id.setNotificationSwitch);
        createReminderButton = (Button) findViewById(R.id.createReminderButton);
        dateButton = (Button) findViewById(R.id.dateButton);
        timeButton = (Button) findViewById(R.id.timeButton);
        dateEditText = (EditText) findViewById(R.id.dateEditText);
        timeEditText = (EditText) findViewById(R.id.timeEditText);
        detailsEditText = (EditText) findViewById(R.id.detailsEditText);

        dateButton.setVisibility(View.INVISIBLE);
        timeButton.setVisibility(View.INVISIBLE);
        dateEditText.setVisibility(View.INVISIBLE);
        timeEditText.setVisibility(View.INVISIBLE);

        dateButton.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                Calendar calendar = Calendar.getInstance();
                currentDayOfMonth = calendar.DAY_OF_MONTH;
                currentMonth = calendar.MONTH;
                currentYear = calendar.YEAR;

                //Opens a DatePicker when the button is pressed.
                DatePickerDialog datePickerDialog = new DatePickerDialog(getApplicationContext(),
                        new DatePickerDialog.OnDateSetListener() {

                            //Displays the date once it has been picked.
                            @Override
                            public void onDateSet(DatePicker view, int year,
                                                  int month, int dayOfMonth) {

                                dateEditText.setText(dayOfMonth + "/" + (month + 1) + "/" + year);

                            }
                        }, currentYear, currentMonth, currentDayOfMonth);

                datePickerDialog.show();
            }
        });

        createReminderButton.setOnClickListener(new View.OnClickListener() {

            //Goes back to MainActivity and updates the list of reminders.
            @Override
            public void onClick(View v) {

                if (hasValidDetails()) {

                    if (hasNotification()) {

                        if (hasValidDateTime()) {

                            //TODO reminder with date and time
                            reminder = new Reminder(detailsEditText.getText().toString());
                            setAlarm();
                        }
                    }
                    else {
                        reminder = new Reminder(detailsEditText.getText().toString());
                    }

                    addReminderToList();
                    finish();
                }
            }
        });

        //Determines what happens when the notification switch is checked or unchecked.
        setNotificationSwitch.setOnCheckedChangeListener(
                new CompoundButton.OnCheckedChangeListener() {

            //Enables or disables date/time visibility on switch.
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                if (isChecked) {
                    dateButton.setVisibility(View.VISIBLE);
                    dateButton.setVisibility(View.VISIBLE);
                    dateEditText.setVisibility(View.VISIBLE);
                    timeEditText.setVisibility(View.VISIBLE);
                }
                else {
                    dateButton.setVisibility(View.INVISIBLE);
                    dateButton.setVisibility(View.INVISIBLE);
                    dateEditText.setVisibility(View.INVISIBLE);
                    timeEditText.setVisibility(View.INVISIBLE);
                }
            }
        });
    }

    /**
     * Checks if details have been input.
     *
     * @return boolean
     */
    protected boolean hasValidDetails() {

        if (detailsEditText.getText().toString().isEmpty()) {
            Toast.makeText(this, "You must provide valid details.", Toast.LENGTH_SHORT);

            return false;
        }
        else {
            return true;
        }
    }

    /**
     * Checks if a date and time has been input.
     *
     * @return boolean
     */
    protected boolean hasValidDateTime() {

        if (dateEditText.getText().toString().isEmpty() ||
                timeEditText.getText().toString().isEmpty()) {
            Toast.makeText(this, "You must provide a valid date and time.", Toast.LENGTH_SHORT);

            return false;
        }
        else {
            return true;
        }
    }

    /**
     * Adds the reminder details to the reminders list in MainActivity.
     */
    protected void addReminderToList() {
        MainActivity.remindersList.add(reminder.getDetails());
    }

    /**
     * Sets an alarm for the notification to go off at the specified time.
     */
    protected void setAlarm() {
        Long notifyTime = calculateTimeInMillis();
        Long currentTime = System.currentTimeMillis();

        Log.e("Notify time", notifyTime.toString());
        Log.e("Current time", currentTime.toString());

        //Adds the reminder's details to the intent to be passed to NotifyReceiver.
        Intent alarmIntent = new Intent(this, NotifyReceiver.class);
        alarmIntent.putExtra("details", reminder.getDetails());

        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);

        //Setting an alarm to go off at the specified time.
        alarmManager.set(AlarmManager.RTC_WAKEUP, notifyTime,
                PendingIntent.getBroadcast(this, DEFAULT, alarmIntent,
                        PendingIntent.FLAG_UPDATE_CURRENT));
    }

    /**
     * Calculates the amount of time after which the alarm should go off.
     *
     * @return Long -- Time in milliseconds.
     */
    protected Long calculateTimeInMillis() {
        Calendar date = Calendar.getInstance();
        date.set(Calendar.DAY_OF_MONTH, reminder.getDayOfMonth());
        date.set(Calendar.MONTH, reminder.getMonth());
        date.set(Calendar.YEAR, reminder.getYear());
        date.set(Calendar.HOUR_OF_DAY, reminder.getHourOfDay());
        date.set(Calendar.MINUTE, reminder.getMinute());

        //This is so that the alarm goes off at exactly when the minute changes.
        date.set(Calendar.SECOND, 0);

        return date.getTimeInMillis();
    }

    /**
     * Returns whether or not a notification is being set.
     *
     * @return true if a notification is being set.
     */
    protected boolean hasNotification() {
        if (setNotificationSwitch.isChecked()) {
            return true;
        }

        return false;
    }
}
